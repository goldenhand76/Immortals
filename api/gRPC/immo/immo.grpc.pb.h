// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/gRPC/immo/immo.proto
#ifndef GRPC_api_2fgRPC_2fimmo_2fimmo_2eproto__INCLUDED
#define GRPC_api_2fgRPC_2fimmo_2fimmo_2eproto__INCLUDED

#include "api/gRPC/immo/immo.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace immo {

class ImmoService final {
 public:
  static constexpr char const* service_full_name() {
    return "immo.ImmoService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status DiscoverNode(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::immo::NodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::immo::NodeResponse>> AsyncDiscoverNode(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::immo::NodeResponse>>(AsyncDiscoverNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::immo::NodeResponse>> PrepareAsyncDiscoverNode(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::immo::NodeResponse>>(PrepareAsyncDiscoverNodeRaw(context, request, cq));
    }
    virtual ::grpc::Status AddNode(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::immo::NodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::immo::NodeResponse>> AsyncAddNode(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::immo::NodeResponse>>(AsyncAddNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::immo::NodeResponse>> PrepareAsyncAddNode(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::immo::NodeResponse>>(PrepareAsyncAddNodeRaw(context, request, cq));
    }
    virtual ::grpc::Status ListNodes(::grpc::ClientContext* context, const ::immo::ListRequest& request, ::immo::ListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::immo::ListResponse>> AsyncListNodes(::grpc::ClientContext* context, const ::immo::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::immo::ListResponse>>(AsyncListNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::immo::ListResponse>> PrepareAsyncListNodes(::grpc::ClientContext* context, const ::immo::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::immo::ListResponse>>(PrepareAsyncListNodesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void DiscoverNode(::grpc::ClientContext* context, const ::immo::NodeRequest* request, ::immo::NodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DiscoverNode(::grpc::ClientContext* context, const ::immo::NodeRequest* request, ::immo::NodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddNode(::grpc::ClientContext* context, const ::immo::NodeRequest* request, ::immo::NodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddNode(::grpc::ClientContext* context, const ::immo::NodeRequest* request, ::immo::NodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListNodes(::grpc::ClientContext* context, const ::immo::ListRequest* request, ::immo::ListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListNodes(::grpc::ClientContext* context, const ::immo::ListRequest* request, ::immo::ListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::immo::NodeResponse>* AsyncDiscoverNodeRaw(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::immo::NodeResponse>* PrepareAsyncDiscoverNodeRaw(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::immo::NodeResponse>* AsyncAddNodeRaw(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::immo::NodeResponse>* PrepareAsyncAddNodeRaw(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::immo::ListResponse>* AsyncListNodesRaw(::grpc::ClientContext* context, const ::immo::ListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::immo::ListResponse>* PrepareAsyncListNodesRaw(::grpc::ClientContext* context, const ::immo::ListRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status DiscoverNode(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::immo::NodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::immo::NodeResponse>> AsyncDiscoverNode(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::immo::NodeResponse>>(AsyncDiscoverNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::immo::NodeResponse>> PrepareAsyncDiscoverNode(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::immo::NodeResponse>>(PrepareAsyncDiscoverNodeRaw(context, request, cq));
    }
    ::grpc::Status AddNode(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::immo::NodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::immo::NodeResponse>> AsyncAddNode(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::immo::NodeResponse>>(AsyncAddNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::immo::NodeResponse>> PrepareAsyncAddNode(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::immo::NodeResponse>>(PrepareAsyncAddNodeRaw(context, request, cq));
    }
    ::grpc::Status ListNodes(::grpc::ClientContext* context, const ::immo::ListRequest& request, ::immo::ListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::immo::ListResponse>> AsyncListNodes(::grpc::ClientContext* context, const ::immo::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::immo::ListResponse>>(AsyncListNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::immo::ListResponse>> PrepareAsyncListNodes(::grpc::ClientContext* context, const ::immo::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::immo::ListResponse>>(PrepareAsyncListNodesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void DiscoverNode(::grpc::ClientContext* context, const ::immo::NodeRequest* request, ::immo::NodeResponse* response, std::function<void(::grpc::Status)>) override;
      void DiscoverNode(::grpc::ClientContext* context, const ::immo::NodeRequest* request, ::immo::NodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddNode(::grpc::ClientContext* context, const ::immo::NodeRequest* request, ::immo::NodeResponse* response, std::function<void(::grpc::Status)>) override;
      void AddNode(::grpc::ClientContext* context, const ::immo::NodeRequest* request, ::immo::NodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListNodes(::grpc::ClientContext* context, const ::immo::ListRequest* request, ::immo::ListResponse* response, std::function<void(::grpc::Status)>) override;
      void ListNodes(::grpc::ClientContext* context, const ::immo::ListRequest* request, ::immo::ListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::immo::NodeResponse>* AsyncDiscoverNodeRaw(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::immo::NodeResponse>* PrepareAsyncDiscoverNodeRaw(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::immo::NodeResponse>* AsyncAddNodeRaw(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::immo::NodeResponse>* PrepareAsyncAddNodeRaw(::grpc::ClientContext* context, const ::immo::NodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::immo::ListResponse>* AsyncListNodesRaw(::grpc::ClientContext* context, const ::immo::ListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::immo::ListResponse>* PrepareAsyncListNodesRaw(::grpc::ClientContext* context, const ::immo::ListRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DiscoverNode_;
    const ::grpc::internal::RpcMethod rpcmethod_AddNode_;
    const ::grpc::internal::RpcMethod rpcmethod_ListNodes_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status DiscoverNode(::grpc::ServerContext* context, const ::immo::NodeRequest* request, ::immo::NodeResponse* response);
    virtual ::grpc::Status AddNode(::grpc::ServerContext* context, const ::immo::NodeRequest* request, ::immo::NodeResponse* response);
    virtual ::grpc::Status ListNodes(::grpc::ServerContext* context, const ::immo::ListRequest* request, ::immo::ListResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DiscoverNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DiscoverNode() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DiscoverNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DiscoverNode(::grpc::ServerContext* /*context*/, const ::immo::NodeRequest* /*request*/, ::immo::NodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDiscoverNode(::grpc::ServerContext* context, ::immo::NodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::immo::NodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddNode() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNode(::grpc::ServerContext* /*context*/, const ::immo::NodeRequest* /*request*/, ::immo::NodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddNode(::grpc::ServerContext* context, ::immo::NodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::immo::NodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListNodes() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNodes(::grpc::ServerContext* /*context*/, const ::immo::ListRequest* /*request*/, ::immo::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNodes(::grpc::ServerContext* context, ::immo::ListRequest* request, ::grpc::ServerAsyncResponseWriter< ::immo::ListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DiscoverNode<WithAsyncMethod_AddNode<WithAsyncMethod_ListNodes<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_DiscoverNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DiscoverNode() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::immo::NodeRequest, ::immo::NodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::immo::NodeRequest* request, ::immo::NodeResponse* response) { return this->DiscoverNode(context, request, response); }));}
    void SetMessageAllocatorFor_DiscoverNode(
        ::grpc::MessageAllocator< ::immo::NodeRequest, ::immo::NodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::immo::NodeRequest, ::immo::NodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DiscoverNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DiscoverNode(::grpc::ServerContext* /*context*/, const ::immo::NodeRequest* /*request*/, ::immo::NodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DiscoverNode(
      ::grpc::CallbackServerContext* /*context*/, const ::immo::NodeRequest* /*request*/, ::immo::NodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddNode() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::immo::NodeRequest, ::immo::NodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::immo::NodeRequest* request, ::immo::NodeResponse* response) { return this->AddNode(context, request, response); }));}
    void SetMessageAllocatorFor_AddNode(
        ::grpc::MessageAllocator< ::immo::NodeRequest, ::immo::NodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::immo::NodeRequest, ::immo::NodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNode(::grpc::ServerContext* /*context*/, const ::immo::NodeRequest* /*request*/, ::immo::NodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddNode(
      ::grpc::CallbackServerContext* /*context*/, const ::immo::NodeRequest* /*request*/, ::immo::NodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListNodes() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::immo::ListRequest, ::immo::ListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::immo::ListRequest* request, ::immo::ListResponse* response) { return this->ListNodes(context, request, response); }));}
    void SetMessageAllocatorFor_ListNodes(
        ::grpc::MessageAllocator< ::immo::ListRequest, ::immo::ListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::immo::ListRequest, ::immo::ListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNodes(::grpc::ServerContext* /*context*/, const ::immo::ListRequest* /*request*/, ::immo::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNodes(
      ::grpc::CallbackServerContext* /*context*/, const ::immo::ListRequest* /*request*/, ::immo::ListResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_DiscoverNode<WithCallbackMethod_AddNode<WithCallbackMethod_ListNodes<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DiscoverNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DiscoverNode() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DiscoverNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DiscoverNode(::grpc::ServerContext* /*context*/, const ::immo::NodeRequest* /*request*/, ::immo::NodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddNode() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNode(::grpc::ServerContext* /*context*/, const ::immo::NodeRequest* /*request*/, ::immo::NodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListNodes() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNodes(::grpc::ServerContext* /*context*/, const ::immo::ListRequest* /*request*/, ::immo::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DiscoverNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DiscoverNode() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DiscoverNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DiscoverNode(::grpc::ServerContext* /*context*/, const ::immo::NodeRequest* /*request*/, ::immo::NodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDiscoverNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddNode() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AddNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNode(::grpc::ServerContext* /*context*/, const ::immo::NodeRequest* /*request*/, ::immo::NodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListNodes() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNodes(::grpc::ServerContext* /*context*/, const ::immo::ListRequest* /*request*/, ::immo::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNodes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DiscoverNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DiscoverNode() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DiscoverNode(context, request, response); }));
    }
    ~WithRawCallbackMethod_DiscoverNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DiscoverNode(::grpc::ServerContext* /*context*/, const ::immo::NodeRequest* /*request*/, ::immo::NodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DiscoverNode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddNode() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddNode(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNode(::grpc::ServerContext* /*context*/, const ::immo::NodeRequest* /*request*/, ::immo::NodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddNode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListNodes() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListNodes(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNodes(::grpc::ServerContext* /*context*/, const ::immo::ListRequest* /*request*/, ::immo::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNodes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DiscoverNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DiscoverNode() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::immo::NodeRequest, ::immo::NodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::immo::NodeRequest, ::immo::NodeResponse>* streamer) {
                       return this->StreamedDiscoverNode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DiscoverNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DiscoverNode(::grpc::ServerContext* /*context*/, const ::immo::NodeRequest* /*request*/, ::immo::NodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDiscoverNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::immo::NodeRequest,::immo::NodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddNode() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::immo::NodeRequest, ::immo::NodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::immo::NodeRequest, ::immo::NodeResponse>* streamer) {
                       return this->StreamedAddNode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddNode(::grpc::ServerContext* /*context*/, const ::immo::NodeRequest* /*request*/, ::immo::NodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::immo::NodeRequest,::immo::NodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListNodes() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::immo::ListRequest, ::immo::ListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::immo::ListRequest, ::immo::ListResponse>* streamer) {
                       return this->StreamedListNodes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNodes(::grpc::ServerContext* /*context*/, const ::immo::ListRequest* /*request*/, ::immo::ListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNodes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::immo::ListRequest,::immo::ListResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DiscoverNode<WithStreamedUnaryMethod_AddNode<WithStreamedUnaryMethod_ListNodes<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DiscoverNode<WithStreamedUnaryMethod_AddNode<WithStreamedUnaryMethod_ListNodes<Service > > > StreamedService;
};

}  // namespace immo


#endif  // GRPC_api_2fgRPC_2fimmo_2fimmo_2eproto__INCLUDED

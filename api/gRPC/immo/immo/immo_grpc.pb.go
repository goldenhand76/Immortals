// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: gRPC/immo/immo.proto

package immo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImmoService_DiscoverNode_FullMethodName = "/immo.ImmoService/DiscoverNode"
	ImmoService_AddNode_FullMethodName      = "/immo.ImmoService/AddNode"
	ImmoService_ListNodes_FullMethodName    = "/immo.ImmoService/ListNodes"
	ImmoService_RemoveNode_FullMethodName   = "/immo.ImmoService/RemoveNode"
)

// ImmoServiceClient is the client API for ImmoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImmoServiceClient interface {
	DiscoverNode(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	AddNode(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	ListNodes(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	RemoveNode(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
}

type immoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImmoServiceClient(cc grpc.ClientConnInterface) ImmoServiceClient {
	return &immoServiceClient{cc}
}

func (c *immoServiceClient) DiscoverNode(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, ImmoService_DiscoverNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immoServiceClient) AddNode(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, ImmoService_AddNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immoServiceClient) ListNodes(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, ImmoService_ListNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immoServiceClient) RemoveNode(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, ImmoService_RemoveNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImmoServiceServer is the server API for ImmoService service.
// All implementations must embed UnimplementedImmoServiceServer
// for forward compatibility
type ImmoServiceServer interface {
	DiscoverNode(context.Context, *NodeRequest) (*NodeResponse, error)
	AddNode(context.Context, *NodeRequest) (*NodeResponse, error)
	ListNodes(context.Context, *ListRequest) (*ListResponse, error)
	RemoveNode(context.Context, *NodeRequest) (*RemoveResponse, error)
	mustEmbedUnimplementedImmoServiceServer()
}

// UnimplementedImmoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImmoServiceServer struct {
}

func (UnimplementedImmoServiceServer) DiscoverNode(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverNode not implemented")
}
func (UnimplementedImmoServiceServer) AddNode(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (UnimplementedImmoServiceServer) ListNodes(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedImmoServiceServer) RemoveNode(context.Context, *NodeRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}
func (UnimplementedImmoServiceServer) mustEmbedUnimplementedImmoServiceServer() {}

// UnsafeImmoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImmoServiceServer will
// result in compilation errors.
type UnsafeImmoServiceServer interface {
	mustEmbedUnimplementedImmoServiceServer()
}

func RegisterImmoServiceServer(s grpc.ServiceRegistrar, srv ImmoServiceServer) {
	s.RegisterService(&ImmoService_ServiceDesc, srv)
}

func _ImmoService_DiscoverNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmoServiceServer).DiscoverNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImmoService_DiscoverNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmoServiceServer).DiscoverNode(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmoService_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmoServiceServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImmoService_AddNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmoServiceServer).AddNode(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmoService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmoServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImmoService_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmoServiceServer).ListNodes(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmoService_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmoServiceServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImmoService_RemoveNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmoServiceServer).RemoveNode(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImmoService_ServiceDesc is the grpc.ServiceDesc for ImmoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImmoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "immo.ImmoService",
	HandlerType: (*ImmoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiscoverNode",
			Handler:    _ImmoService_DiscoverNode_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _ImmoService_AddNode_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _ImmoService_ListNodes_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _ImmoService_RemoveNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC/immo/immo.proto",
}

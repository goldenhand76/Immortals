// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: node.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createNode = `-- name: CreateNode :one
INSERT INTO nodes (
    name, agent_id, client_id, is_online)
    VALUES (
    $1, $2, $3, $4
) RETURNING id, name, agent_id, client_id, is_online
`

type CreateNodeParams struct {
	Name     sql.NullString `json:"name"`
	AgentID  sql.NullInt32  `json:"agent_id"`
	ClientID sql.NullString `json:"client_id"`
	IsOnline sql.NullInt32  `json:"is_online"`
}

func (q *Queries) CreateNode(ctx context.Context, arg CreateNodeParams) (Nodes, error) {
	row := q.db.QueryRowContext(ctx, createNode,
		arg.Name,
		arg.AgentID,
		arg.ClientID,
		arg.IsOnline,
	)
	var i Nodes
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AgentID,
		&i.ClientID,
		&i.IsOnline,
	)
	return i, err
}

const deleteNode = `-- name: DeleteNode :exec
DELETE FROM nodes WHERE id = $1
`

func (q *Queries) DeleteNode(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNode, id)
	return err
}

const getNode = `-- name: GetNode :one
SELECT id, name, agent_id, client_id, is_online FROM nodes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetNode(ctx context.Context, id int64) (Nodes, error) {
	row := q.db.QueryRowContext(ctx, getNode, id)
	var i Nodes
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AgentID,
		&i.ClientID,
		&i.IsOnline,
	)
	return i, err
}

const listNodes = `-- name: ListNodes :many
SELECT id, name, agent_id, client_id, is_online FROM nodes
ORDER BY name
`

func (q *Queries) ListNodes(ctx context.Context) ([]Nodes, error) {
	rows, err := q.db.QueryContext(ctx, listNodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Nodes
	for rows.Next() {
		var i Nodes
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AgentID,
			&i.ClientID,
			&i.IsOnline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNode = `-- name: UpdateNode :one
UPDATE nodes SET name = $2
WHERE id = $1
RETURNING id, name, agent_id, client_id, is_online
`

type UpdateNodeParams struct {
	ID   int64          `json:"id"`
	Name sql.NullString `json:"name"`
}

func (q *Queries) UpdateNode(ctx context.Context, arg UpdateNodeParams) (Nodes, error) {
	row := q.db.QueryRowContext(ctx, updateNode, arg.ID, arg.Name)
	var i Nodes
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AgentID,
		&i.ClientID,
		&i.IsOnline,
	)
	return i, err
}
